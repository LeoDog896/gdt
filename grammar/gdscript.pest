// https://docs.godotengine.org/en/latest/contributing/development/file_formats/gdscript_grammar.html
program = {
	SOI
    ~ statement* ~
    EOI
}

// all chars allowed by gdscript in an identifier
ident_char = { ASCII_ALPHANUMERIC | "_" }
identifier = @{ ident_char+ }

digit = { ASCII_DIGIT }
number = @{ ("-")? ~ digit+ }

chars = @{ (!"\"" ~ ANY)* }
string = ${ "\"" ~ chars ~ "\"" }

array = {
	"[" ~ "]" |
    "[" ~ expression ~ ("," ~ expression)* ~ "]"
}

pair = { (string | identifier | number) ~ ("=" | ":") ~ expression }

object = {
    "{" ~ "}" |
    "{" ~ pair ~ ("," ~ pair)* ~ "}"
}

function = {
	identifier
    ~ "(" ~ expression?
    	~ ("," ~ expression)*
    ~ ")"
}

expression = { 
	function
	| identifier
    | number
    | string
    | array
    | object
}

inheritance = ${ "extends " ~ identifier }
class_name = ${ "class_name " ~ identifier }

annotation = @{ "@" ~ identifier ~ "(" ~ string ~ ")" }

local_statement = {
	variable_declaration
    | const_declaration
    | enum_declaration
    | function_declaration
}

statement = { annotation* ~ (
		variable_declaration
    	| const_declaration
    	| inheritance
    	| class_name
    	| enum_declaration
        | function_declaration
	)
}

onready = { "onready " }
export = { "export " }

variable_type = { ":" ~ identifier }
inferred = @{ ":=" }
variable_declaration = { 
	onready?
    ~ export?
    ~ "var "
    ~ identifier
    ~ (
    	(variable_type ~ ("=" ~ expression)?)
        | (variable_type? ~ ("=" ~ expression))
        | (inferred ~ expression)
    )?
}

enum_token = _{ "enum" }
enum_value = { identifier ~ ("=" ~ number)? }
enum_header = ${ enum_token ~ WHITESPACE+ ~ (identifier)? }
enum_declaration = {
	enum_header ~
    "{" ~ enum_value ~ ("," ~ enum_value)* ~ "}"
}

// const doesn't have walrus operators
const_declaration = {
	export?
    ~ "const "
    ~ identifier
    ~ variable_type?
    ~ "="
    ~ expression
}

function_token = { "func " }
function_name = { identifier }
function_header = { function_token ~ function_name ~ "(" ~ (identifier ~ ("," ~ identifier)*)? ~ ")" ~ ":" }
function_declaration = { function_header }

WHITESPACE = _{ " " | "\t" | "\n" }
COMMENT = { "#" ~ (!"\n" ~ ANY)* }